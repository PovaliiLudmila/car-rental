{"version":3,"file":"static/js/401.ba546e4d.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/ContactForm/ContactForm.js","../node_modules/@chakra-ui/layout/src/grid.tsx","../node_modules/@chakra-ui/breakpoint-utils/dist/chunk-G72KV6MB.mjs","../node_modules/@chakra-ui/layout/src/simple-grid.tsx","../node_modules/@chakra-ui/button/src/icon-button.tsx","components/ContactList/ContactList.js","components/Filter/Filter.js","components/pages/Contacts.jsx"],"sourcesContent":["export const selectContacts = state => state.contacts.items;\nexport const selectStatusFilter = state => state.filter;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;","import { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { addContact } from 'redux/contacts/operations';\nimport { FormControl, FormLabel, Input, Button, Flex } from '@chakra-ui/react';\n\nconst ContactForm = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const handleAddContact = e => {\n    e.preventDefault();\n\n    const form = e.target;\n    const name = e.target.name.value;\n    const number = e.target.number.value;\n    const nameOnTheList = contacts.some(\n      contact => contact.name.toLowerCase() === name.toLowerCase()\n    );\n\n    const newContact = {\n      name: name,\n      number: number,\n    };\n\n    if (!nameOnTheList) {\n      dispatch(addContact(newContact));\n      form.reset();\n    } else {\n      alert(`${name} is in use. Try another name.`);\n    }\n  };\n\n  return (\n    <Flex direction=\"column\" align=\"center\" m=\"4\">\n      <FormControl as=\"form\" onSubmit={handleAddContact}>\n        <FormLabel htmlFor=\"name\">Name</FormLabel>\n        <Input\n          type=\"text\"\n          name=\"name\"\n          maxlength=\"30\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          mb=\"4\"\n        />\n        <FormLabel htmlFor=\"number\">Number</FormLabel>\n        <Input\n          type=\"tel\"\n          name=\"number\"\n          maxlength=\"30\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          mb=\"4\"\n        />\n        <Button type=\"submit\" bg=\"blue.500\" color=\"white\">\n          Add contact\n        </Button>\n      </FormControl>\n    </Flex>\n  );\n};\n\nexport default ContactForm;","import {\n  chakra,\n  forwardRef,\n  SystemProps,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\n\nexport interface GridOptions {\n  /**\n   * Shorthand prop for `gridTemplateColumns`\n   * @type SystemProps[\"gridTemplateColumns\"]\n   */\n  templateColumns?: SystemProps[\"gridTemplateColumns\"]\n  /**\n   * Shorthand prop for `gridGap`\n   * @type SystemProps[\"gridGap\"]\n   */\n  gap?: SystemProps[\"gridGap\"]\n  /**\n   * Shorthand prop for `gridRowGap`\n   * @type SystemProps[\"gridRowGap\"]\n   */\n  rowGap?: SystemProps[\"gridRowGap\"]\n  /**\n   * Shorthand prop for `gridColumnGap`\n   * @type SystemProps[\"gridColumnGap\"]\n   */\n  columnGap?: SystemProps[\"gridColumnGap\"]\n  /**\n   * Shorthand prop for `gridAutoFlow`\n   * @type SystemProps[\"gridAutoFlow\"]\n   */\n  autoFlow?: SystemProps[\"gridAutoFlow\"]\n  /**\n   * Shorthand prop for `gridAutoRows`\n   * @type SystemProps[\"gridAutoRows\"]\n   */\n  autoRows?: SystemProps[\"gridAutoRows\"]\n  /**\n   * Shorthand prop for `gridAutoColumns`\n   * @type SystemProps[\"gridAutoColumns\"]\n   */\n  autoColumns?: SystemProps[\"gridAutoColumns\"]\n  /**\n   * Shorthand prop for `gridTemplateRows`\n   * @type SystemProps[\"gridTemplateRows\"]\n   */\n  templateRows?: SystemProps[\"gridTemplateRows\"]\n  /**\n   * Shorthand prop for `gridTemplateAreas`\n   * @type SystemProps[\"gridTemplateAreas\"]\n   */\n  templateAreas?: SystemProps[\"gridTemplateAreas\"]\n  /**\n   * Shorthand prop for `gridColumn`\n   * @type SystemProps[\"gridColumn\"]\n   */\n  column?: SystemProps[\"gridColumn\"]\n  /**\n   * Shorthand prop for `gridRow`\n   * @type SystemProps[\"gridRow\"]\n   */\n  row?: SystemProps[\"gridRow\"]\n}\n\nexport interface GridProps\n  extends Omit<HTMLChakraProps<\"div\">, keyof GridOptions>,\n    GridOptions {}\n\n/**\n * React component used to create grid layouts.\n *\n * It renders a `div` with `display: grid` and\n * comes with helpful style shorthand.\n *\n * @see Docs https://chakra-ui.com/grid\n */\nexport const Grid = forwardRef<GridProps, \"div\">(function Grid(props, ref) {\n  const {\n    templateAreas,\n    gap,\n    rowGap,\n    columnGap,\n    column,\n    row,\n    autoFlow,\n    autoRows,\n    templateRows,\n    autoColumns,\n    templateColumns,\n    ...rest\n  } = props\n\n  const styles = {\n    display: \"grid\",\n    gridTemplateAreas: templateAreas,\n    gridGap: gap,\n    gridRowGap: rowGap,\n    gridColumnGap: columnGap,\n    gridAutoColumns: autoColumns,\n    gridColumn: column,\n    gridRow: row,\n    gridAutoFlow: autoFlow,\n    gridAutoRows: autoRows,\n    gridTemplateRows: templateRows,\n    gridTemplateColumns: templateColumns,\n  }\n\n  return <chakra.div ref={ref} __css={styles} {...rest} />\n})\n\nGrid.displayName = \"Grid\"\n","// src/responsive.ts\nimport { isObject } from \"@chakra-ui/shared-utils\";\nvar breakpoints = Object.freeze([\n  \"base\",\n  \"sm\",\n  \"md\",\n  \"lg\",\n  \"xl\",\n  \"2xl\"\n]);\nfunction mapResponsive(prop, mapper) {\n  if (Array.isArray(prop)) {\n    return prop.map((item) => item === null ? null : mapper(item));\n  }\n  if (isObject(prop)) {\n    return Object.keys(prop).reduce((result, key) => {\n      result[key] = mapper(prop[key]);\n      return result;\n    }, {});\n  }\n  if (prop != null) {\n    return mapper(prop);\n  }\n  return null;\n}\nfunction objectToArrayNotation(obj, bps = breakpoints) {\n  const result = bps.map((br) => {\n    var _a;\n    return (_a = obj[br]) != null ? _a : null;\n  });\n  const lastItem = result[result.length - 1];\n  while (lastItem === null)\n    result.pop();\n  return result;\n}\nfunction arrayToObjectNotation(values, bps = breakpoints) {\n  const result = {};\n  values.forEach((value, index) => {\n    const key = bps[index];\n    if (value == null)\n      return;\n    result[key] = value;\n  });\n  return result;\n}\nfunction isResponsiveObjectLike(obj, bps = breakpoints) {\n  const keys = Object.keys(obj);\n  return keys.length > 0 && keys.every((key) => bps.includes(key));\n}\nvar isCustomBreakpoint = (v) => Number.isNaN(Number(v));\n\nexport {\n  breakpoints,\n  mapResponsive,\n  objectToArrayNotation,\n  arrayToObjectNotation,\n  isResponsiveObjectLike,\n  isCustomBreakpoint\n};\n","import {\n  forwardRef,\n  getToken,\n  ResponsiveValue,\n  useTheme,\n} from \"@chakra-ui/system\"\nimport { mapResponsive } from \"@chakra-ui/breakpoint-utils\"\nimport { Grid, GridProps } from \"./grid\"\n\ninterface SimpleGridOptions {\n  /**\n   * The width at which child elements will break into columns. Pass a number for pixel values or a string for any other valid CSS length.\n   */\n  minChildWidth?: GridProps[\"minWidth\"]\n  /**\n   * The number of columns\n   */\n  columns?: ResponsiveValue<number>\n  /**\n   * The gap between the grid items\n   */\n  spacing?: GridProps[\"gridGap\"]\n  /**\n   * The column gap between the grid items\n   */\n  spacingX?: GridProps[\"gridGap\"]\n  /**\n   * The row gap between the grid items\n   */\n  spacingY?: GridProps[\"gridGap\"]\n}\n\nexport interface SimpleGridProps extends GridProps, SimpleGridOptions {}\n\n/**\n * SimpleGrid\n *\n * React component that uses the `Grid` component and provides\n * a simpler interface to create responsive grid layouts.\n *\n * Provides props that easily define columns and spacing.\n *\n * @see Docs https://chakra-ui.com/simplegrid\n */\nexport const SimpleGrid = forwardRef<SimpleGridProps, \"div\">(\n  function SimpleGrid(props, ref) {\n    const { columns, spacingX, spacingY, spacing, minChildWidth, ...rest } =\n      props\n\n    const theme = useTheme()\n    const templateColumns = minChildWidth\n      ? widthToColumns(minChildWidth, theme)\n      : countToColumns(columns)\n\n    return (\n      <Grid\n        ref={ref}\n        gap={spacing}\n        columnGap={spacingX}\n        rowGap={spacingY}\n        templateColumns={templateColumns}\n        {...rest}\n      />\n    )\n  },\n)\n\nSimpleGrid.displayName = \"SimpleGrid\"\n\nfunction toPx(n: string | number) {\n  return typeof n === \"number\" ? `${n}px` : n\n}\n\nfunction widthToColumns(width: any, theme: Record<string, any>) {\n  return mapResponsive(width, (value) => {\n    const _value = getToken(\"sizes\", value, toPx(value))(theme)\n    return value === null ? null : `repeat(auto-fit, minmax(${_value}, 1fr))`\n  })\n}\n\nfunction countToColumns(count: any) {\n  return mapResponsive(count, (value) =>\n    value === null ? null : `repeat(${value}, minmax(0, 1fr))`,\n  )\n}\n","import { forwardRef } from \"@chakra-ui/system\"\nimport { cloneElement, isValidElement } from \"react\"\nimport { Button, ButtonProps } from \"./button\"\n\ntype OmittedProps =\n  | \"leftIcon\"\n  | \"rightIcon\"\n  | \"loadingText\"\n  | \"iconSpacing\"\n  | \"spinnerPlacement\"\n\ninterface BaseButtonProps extends Omit<ButtonProps, OmittedProps> {}\n\nexport interface IconButtonProps extends BaseButtonProps {\n  /**\n   * The icon to be used in the button.\n   * @type React.ReactElement\n   */\n  icon?: React.ReactElement\n  /**\n   * If `true`, the button will be perfectly round. Else, it'll be slightly round\n   *\n   * @default false\n   */\n  isRound?: boolean\n  /**\n   * A11y: A label that describes the button\n   */\n  \"aria-label\": string\n}\n\n/**\n * Icon button renders an icon within a button.\n *\n * @see Docs https://chakra-ui.com/docs/components/icon-button\n */\nexport const IconButton = forwardRef<IconButtonProps, \"button\">(\n  (props, ref) => {\n    const { icon, children, isRound, \"aria-label\": ariaLabel, ...rest } = props\n\n    /**\n     * Passing the icon as prop or children should work\n     */\n    const element = icon || children\n    const _children = isValidElement(element)\n      ? cloneElement(element as any, {\n          \"aria-hidden\": true,\n          focusable: false,\n        })\n      : null\n\n    return (\n      <Button\n        padding=\"0\"\n        borderRadius={isRound ? \"full\" : undefined}\n        ref={ref}\n        aria-label={ariaLabel}\n        {...rest}\n      >\n        {_children}\n      </Button>\n    )\n  },\n)\n\nIconButton.displayName = \"IconButton\"\n","import { useSelector, useDispatch } from 'react-redux';\nimport {\n  Flex,\n  Box,\n  Text,\n  IconButton,\n  CloseButton,\n  SimpleGrid,\n} from '@chakra-ui/react';\nimport {\n  selectStatusFilter,\n  selectContacts,\n  selectIsLoading,\n} from 'redux/contacts/selectors';\nimport { deleteContact } from 'redux/contacts/operations';\n\nconst ContactList = () => {\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectStatusFilter);\n  const isLoading = useSelector(selectIsLoading);\n  const dispatch = useDispatch();\n\n  const handleDeleteContact = id => dispatch(deleteContact(id));\n\n  const filteredContacts = contacts.filter(\n    contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase()) ||\n      contact.number.includes(filter)\n  );\n\n  return (\n    <>\n      {isLoading ? (\n        <Text>Loading...</Text>\n      ) : (\n        <SimpleGrid columns={4} spacing={10}>\n          {filteredContacts.length > 0 ? (\n            filteredContacts.map(({ id, name, number }) => (\n              <Box\n                key={id}\n                borderWidth=\"1px\"\n                borderRadius=\"lg\"\n                overflow=\"hidden\"\n                my=\"2\"\n              >\n                <Flex alignItems=\"center\" justifyContent=\"space-between\" p=\"2\">\n                  <Text>{name}</Text>\n                  <IconButton\n                    icon={<CloseButton />}\n                    onClick={() => handleDeleteContact(id)}\n                  />\n                </Flex>\n                <Box p=\"2\">\n                  <Text>{number}</Text>\n                </Box>\n              </Box>\n            ))\n          ) : (\n            <Text>No contacts found</Text>\n          )}\n        </SimpleGrid>\n      )}\n    </>\n  );\n};\n\nexport default ContactList;","import { useDispatch, useSelector } from 'react-redux';\nimport { Input, FormControl, FormLabel } from '@chakra-ui/react';\n\nimport { setFilter } from 'redux/contacts/filtersSlice';\nimport { selectStatusFilter } from 'redux/contacts/selectors';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n\n  const onChange = e => {\n    const value = e.target.value.toLowerCase();\n    dispatch(setFilter(value));\n  };\n\n  return (\n    <FormControl id=\"filter\">\n      <FormLabel>Search list:</FormLabel>\n      <Input\n        type=\"search\"\n        name=\"filter\"\n        value={useSelector(selectStatusFilter)}\n        onChange={onChange}\n        placeholder=\"Find contacts by name or phone number\"\n      />\n    </FormControl>\n  );\n};\n\nexport default Filter;","import React from 'react';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\n\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport ContactList from 'components/ContactList/ContactList';\nimport Filter from 'components/Filter/Filter';\n\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { selectIsLoading } from 'redux/contacts/selectors';\n\nconst App = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div>\n      <Helmet>\n        <h1>Phonebook</h1>\n      </Helmet>\n      <ContactForm />\n      <div>{isLoading && 'Request in progress...'}</div>\n      {isLoading ? null : <Filter />}\n      <ContactList />\n    </div>\n  );\n};\n\nexport default App;"],"names":["selectContacts","state","contacts","items","selectStatusFilter","filter","selectIsLoading","isLoading","useSelector","dispatch","useDispatch","direction","align","m","as","onSubmit","e","preventDefault","form","target","name","value","number","nameOnTheList","some","contact","toLowerCase","newContact","alert","addContact","reset","htmlFor","I","type","maxlength","title","required","mb","pattern","bg","color","props","forwardRef","templateAreas","gap","rowGap","columnGap","column","row","autoFlow","autoRows","templateRows","autoColumns","templateColumns","rest","styles","display","gridTemplateAreas","gridGap","gridRowGap","gridColumnGap","gridAutoColumns","gridColumn","gridRow","gridAutoFlow","gridAutoRows","gridTemplateRows","gridTemplateColumns","div","__css","Grid","chakra","Object","freeze","mapResponsive","prop","mapper","Array","isArray","map","item","isObject","keys","reduce","result","key","ref","getToken","spacingX","spacingY","spacing","minChildWidth","theme","widthToColumns","countToColumns","_value","SimpleGrid","count","useTheme","displayName","toPx","n","cloneElement","icon","children","isRound","ariaLabel","element","_children","focusable","Button","IconButton","isValidElement","padding","borderRadius","filteredContacts","includes","columns","length","id","borderWidth","overflow","my","alignItems","justifyContent","p","onClick","deleteContact","handleDeleteContact","onChange","setFilter","placeholder","useEffect","fetchContacts","Helmet"],"sourceRoot":""}